# --------------------------------------------------------------------------------------------------
# Basic metadata
# --------------------------------------------------------------------------------------------------
code: personal_assistant
title: Personal Assistant
subtitle: How to automate tasks with Luigi and an AWS EC2 instance.
image: personal_assistant.jpg
image_square: personal_assistant_square.jpg

main: True
highlight: True

tags:
  - Python
  - Luigi
  - Selenium
  - Automation

tags_filter:
  - Automation

# --------------------------------------------------------------------------------------------------
# Extra info. This will add a button with href to the url
# --------------------------------------------------------------------------------------------------
link: 
  text: Github
  url: https://github.com/villoro/villoro_tasks


# --------------------------------------------------------------------------------------------------
# Content
# --------------------------------------------------------------------------------------------------
brief_markdown: |
  The idea was to create an assistant that would work in an AWS EC2 instance.
  This assistant would allow me to easily automate tasks that will be useful for me.

  As an example I use this assistant to create reports about my personal finances and to help me book cheap flights.

# metrics:
#   - 1
#   - 2
#   - 3

motivation_markdown: |
  I am a huge fan of automation and I wanted a bot that worked for me.

  The idea was to create an assistant that allowed me to avoid repetitive tasks.
  It was a must that new tasks could be added easily to the assistant.

body_markdown: |
  ## How to automate tasks

  I wanted to use a cloud provider so the first thing I did was to create an AWS EC2 instance ([more info](https://villoro.com/post/aws_ec2)).

  Then I needed an orchestrator that handled the tasks and I was between [Airflow](https://airflow.apache.org/) and [Luigi](https://github.com/spotify/luigi).

  I started working with **Airflow** ([more info](https://villoro.com/post/airflow)) because it has more features.
  But I didn't need a lot of the features that **Airflow** offered and it was something more complex that what I wanted.

  So I switched to **Luigi** and a [created a method](https://villoro.com/post/luigi) that made really easy to integrate new tasks.

  ## The tasks

  ### 1. Expenses/Incomes Report

  Since 2010 I have been recording all expenses and incomes. For the last years I have been using [Money Lover](https://moneylover.me/) to do so.
  This app has a way to export the data as an Excel file. But the problem is that it does not have the format I want.
  So the first task is to process that data.

  The second part was to create a Report from that data.
  I created a custom html report using [W3css](https://www.w3schools.com/w3css/) and [Highcharts](https://www.highcharts.com/) and **Jinja2** for templating.

  ### 2. Flights tracker

  I regularly travel to Italy and I want to do it as cheap as possible.
  So I thought the best way to do it was to let the assistant track all the prices between the airports I wanted and store that data.
  Then I could use **Data Analysis** or **Machine Learning** to minimize the price I pay for the flights.

  To do so I used the **Rapid API** [Flight Search](https://rapidapi.com/skyscanner/api/skyscanner-flight-search) app.
  This API allowed me to query some pairs of airports daily for free.
  So right now the assistant is storing a year of data each day so that I can see prices changes and which company offers cheaper flights each day.

  ## Getting info

  The assistant is connected to **slack** so that is able to send messages of each task it completes.
  It will also give information about any task failure that might happen.

  ## Nexts steps

  The idea is to extend the **slack** integration by creating a chatbot.

  This chatbot would allow me to:

  * ask about the current state of the tasks
  * make the assistant do a task instantaneously
  * get feedback of anything I ask

