---
import config from "@/config/config.json";
import Share from "@/components/Share.astro";
import BlogDetails from "@/components/BlogDetails.astro";
import ImageMod from "@/components/ImageMod.astro";
import TOC from "@/components/TOC.astro";
import GiscusComments from "@/components/GiscusComments.astro";
import RelatedPosts from "@/components/RelatedPosts.astro";
import PostActions from "@/components/PostActions.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import similarItems from "@/lib/utils/similarItems";
import { markdownify } from "@/lib/utils/textConverter";
import { categoryMetadata } from "@/lib/categoryMetadata";
import { humanize } from "@/lib/utils/textConverter";

const { blog_folder, similar_items_length } = config.settings;
const { post } = Astro.props;

const posts = await getSinglePage(blog_folder);
const similarPosts = similarItems(post, posts, similar_items_length);
const { Content, headings } = await post.render();
const { title, description, image, date, tags, category, slug } = post.data;

const metadata = categoryMetadata[category] || { name: humanize(category) };
---

<div class="relative">
  <div class="grid grid-cols-1 lg:grid-cols-12">
    <!-- TOC for large screens -->
    <div id="toc-container" class="px-6 hidden lg:block lg:col-span-3 lg:bg-theme-light lg:dark:bg-darkmode-theme-light lg:sticky lg:overflow-y-auto">
      <TOC headings={headings} />
    </div>

    <section class="section container py-7 lg:col-span-9">
      <div class="2xl:col-10">
        <article class="article-content">
          <h1 set:html={markdownify(title)} class="h2 mb-4" />

          <BlogDetails date={date} category={category} tags={tags} className="btn-primary" />

          {image && (
            <div class="mb-10">
              <ImageMod
                src={image}
                height={500}
                width={1200}
                alt={title}
                class="w-full rounded"
                format="webp"
                loading="eager"
              />
            </div>
          )}

          <!-- TOC for small screens -->
          <div class="block lg:hidden mb-10">
            <TOC headings={headings} />
          </div>

          <div class="content mb-10">
            <Content />
          </div>
        </article>

        <PostActions title={title} description={description} slug={slug} />
        <GiscusComments />
        <RelatedPosts currentPost={post} />
      </div>
    </section>
  </div>
</div>

<script>
  function setupTOC() {
    const tocContainer = document.querySelector('#toc-container');
    if (!tocContainer) return;

    const header = document.querySelector('.header');
    const footer = document.querySelector('footer');
    const headerHeight = header.offsetHeight;
    const extraMargin = 48; // This ensures that section titles are visible

    function isLargeScreen() {
      return window.innerWidth >= 1024; // 1024 is the minimum for tailwind 'lg'
    }

    function adjustTOCHeight() {
      if (!isLargeScreen()) return;

      const footerTop = footer.getBoundingClientRect().top;
      const windowHeight = window.innerHeight;
      const availableHeight = windowHeight - headerHeight;
      const tocHeight = footerTop < windowHeight ? footerTop - headerHeight : availableHeight;

      tocContainer.style.top = `${headerHeight}px`;
      tocContainer.style.maxHeight = `${availableHeight}px`;
      tocContainer.style.height = `${tocHeight}px`;
    }

    function addIntersectionObserver() {
      if (!isLargeScreen()) return;

      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          const heading = entry.target.querySelector('h2, h3, h4, h5');
          if (!heading) return;
          const id = heading.getAttribute('id');

          const links = document.querySelectorAll(`nav.toc li a[href="#${id}"]`);
          links.forEach(link => {
            if (entry.isIntersecting) {
              link.classList.add('active');
            } else {
              link.classList.remove('active');
            }
          });
        });
      }, {
        rootMargin: `-${headerHeight}px 0px 0px 0px`,
        threshold: 0.01
      });

      document.querySelectorAll('.article-content section').forEach((section) => {
        observer.observe(section);
      });
    }

    function handleTocClick(event) {
      if (event.target.tagName === 'A') {
        event.preventDefault();
        const targetId = event.target.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);

        window.scrollTo({
          top: targetElement.offsetTop - headerHeight + extraMargin
        });

        // Update URL hash without jumping to section
        history.pushState(null, '', `#${targetId}`);
      }
    }

    adjustTOCHeight();
    addIntersectionObserver();

    document.querySelectorAll('nav.toc').forEach(toc => {
      toc.addEventListener('click', handleTocClick);
    });

    window.addEventListener('resize', adjustTOCHeight);
    window.addEventListener('scroll', adjustTOCHeight);
  }

  document.addEventListener('astro:after-swap', setupTOC);
  document.addEventListener('astro:page-load', setupTOC);
</script>
