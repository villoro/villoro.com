# --------------------------------------------------------------------------------------------------
# Basic metadata
# --------------------------------------------------------------------------------------------------
code: cv
title: Resume Automation
subtitle: Automating the creation of the resumes (CV).
image: cv.jpg
image_square: cv_square.jpg

main: False
highlight: False

tags:
  - Automation
  - Web
  - Python
  - HTML
  - CSS

tags_filter:
  - Automation
  - Web

# --------------------------------------------------------------------------------------------------
# Extra info. This will add a button with href to the url
# --------------------------------------------------------------------------------------------------
link: 
  text: Github
  url: https://github.com/villoro/cv


# --------------------------------------------------------------------------------------------------
# Content
# --------------------------------------------------------------------------------------------------
brief_markdown: |
  I automated the creation of a resume. The main advantage is that the content is in `yamls` while the design is done by `html`/`css`. It also allows having different designs for example for multilanguage.

# metrics:
#   -

motivation_markdown: |
  While working at [Basetis](https://www.basetis.com/) we constantly needed to update our resumes so that we could present our team for different projects. We use Google Docs and it was always hard when you needed to update the content or fit it in a different template. So I thought that I could do something that allowed to split the content itself from the design.

  I also thought that would help me to keep my personal resume updated and it would be easier to mantain the different versions (since I have it in 3 languages). I had previously tried Microsoft Word, LaTeX and Adobe inDesign but all of them had some disadvantatges.

body_markdown: |
  ## Solution

  The main idea was to create the CV as a web page using [Flask](http://flask.pocoo.org/) and the power of [jinja2](http://jinja.pocoo.org/docs/2.10/) templates. With flask I could preview all resumes. This solution would allow the design team of my company easily adapt the html templates to basetis design style.

  And of course we will need to transform the webpage to `pdf` since it is the most common format for resumes. To that end I used [wkhtmltopdf](https://wkhtmltopdf.org/) to transform the Flask webpage to a pdf.

  Finally I created a small script that scans all `yaml` files in `input` folder and transform them to `pdf`.

  I did not deploy it anywhere but with this base it could easily be deployed to an [AWS EC2](https://aws.amazon.com/es/ec2/) and set up a task that creates the CV periodically and automatically.

  If you want to use it check it out on [github](https://github.com/villoro/cv).
